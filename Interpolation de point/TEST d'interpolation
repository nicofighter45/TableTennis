class indatrice() :
    def __init__(self, t1, t2,valeur):
        self.debut = t1
        self.fin = t2
        self.valeur = valeur
    def __call__(self, point):
        if self.debut <= point and self.fin >= point :
            return(self.valeur)
        else : return(0)
class matrice() :
    def __init__(self,listedeliste) :
        self.mat = listedeliste
        self.longueur = len(listedeliste[0])
        self.largeur = len(listedeliste)
    def __getitem__(self, indices):
        i, j = indices
        return self.donnees[i][j]
    def __setitem__(self, indices, valeur):
        i, j = indices
        self.donnees[i][j] = valeur
    def __repr__(self):
        return repr(self.donnees)
    def __add__(A,B):
        if A.longueur == B.longueur and A.largeur == B.largeur :
            return(matrice([[A[i][j] + B[i][j] for j in range (len(A[i]))] for i in range (len(A))]))
        else : return(False)
class polynome():
    def __init__(self, coefficient) :
        p=-1
        liste=[]
        while coefficient[p]==0 :
            p-=1
        if p!=-1 : self.coefficient = coefficient
        else : self.coefficient = coefficient[:p+1]        
    def coefdomi(self):
        if self.coefficient ==[] : return 0
        return(self.coefficient[-1])
    def degre(self):
        return(len(self.coefficient)-1)
    def coef(self,deg):
        if deg > degre(self):return(0)
        return(self.coefficient[deg])
    def __call__(self, valeur) :
        somme=0
        for k in range(len(self.coefficient)) :
            somme+=self.coefficient[k]*valeur**k
        return somme
    def __add__(a,b) :
        liste =[]
        if len(a.coefficient) <= len(b.coefficient) :
            for k in range (len(a.coefficient)):
                liste.append(a.coefficient[k]+b.coefficient[k])
        else :
            for k in range (len(b.coefficient)):
                liste.append(a.coefficient[k]+b.coefficient[k])
        return(polynome(liste))